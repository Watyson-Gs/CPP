#include<iostream>
#include<vector>
#include<queue>
using namespace std;

static vector<int> adjList[210];
static int cor[210];

// ========= BFS para verificar se o grafo e bipartido =========
bool bipartido(int &x, int &zero, int &um)
{
	int atual=0;
	unsigned i=0;
	bool eBipartido=true;

	queue<int> fila;
	fila.push(x);
	cor[x]=0;++zero;
	while(!fila.empty() && eBipartido)
	{
		atual=fila.front();
		fila.pop();

		for(i=0; i<adjList[atual].size() && eBipartido; ++i)
		{
			if(cor[adjList[atual][i]]==-1)
			{
				cor[adjList[atual][i]]= 1-cor[atual];
				fila.push(adjList[atual][i]);

				cor[adjList[atual][i]] ? ++um : ++zero;
			}
			else if(cor[adjList[atual][i]]==cor[atual])
			{
				eBipartido=false;
			}
		}
	}
	return eBipartido;
}

// ========= Retorna o menor valor =========
int menor(int &a, int &b){return a<b || !b ? a : b;}

int main()
{
	int i=0, j=0, instancias=0, cruzamentos=0, ruas=0, a=0, b=0, zero=0, um=0, saida=0;
	bool eBipartido=true;

	scanf("%d", &instancias);
	for(i=0; i<instancias; ++i)
	{
		// ========= Leia os dados =========
		scanf("%d %d", &cruzamentos, &ruas);
		for(j=0; j<cruzamentos; cor[j]=-1, adjList[j].clear(), ++j);
		for(j=0; j<ruas; ++j)
		{
			scanf("%d %d", &a, &b);
			adjList[a].push_back(b);
			adjList[b].push_back(a);
		}

		// ========= Verifique todos os cruzamentos =========
		eBipartido=true;
		for(j=0, saida=0; j<cruzamentos && eBipartido; ++j)
		{
			if(cor[j]==-1)
			{
				zero=um=0;
				eBipartido=bipartido(j, zero, um);
				saida+=menor(zero, um);
			}
		}
		
		// ========= Saida =========
		if(j==cruzamentos)
		{
			if(!saida){++saida;}
			printf("%d\n", saida);
		}
		else{printf("-1\n");}
	}
}
